@model GitHgMirror.Common.Models.ViewModels.MirroringConfigurationsViewModel
@using GitHgMirror.Common.Models
@using GitHgMirror.CommonTypes
@using Orchard.ContentManagement

@{
    Script.Require("ShapesBase");

    Html.TitleForPage(T("My Mirroring Configurations"));
}

<h1>
    @Html.TitleForPage(T("Two-way mirroring (syncing) between git and mercurial repositories").Text)
</h1>

<h2>
    @Html.ActionLink(T("Create new Mirroring Configuration").Text, "Create", "MirroringConfiguration", new { Area = "GitHgMirror.Common" }, new { @class = "button" })
</h2>

@if (Model.OwnMirroringConfigurations.Count() == 0)
{
    <h3>
        @T("There are no Mirroring Configurations to display.")
    </h3>
}
else
{
    using (Html.BeginFormAntiForgeryPost())
    {
        <fieldset>
            <ul>
                @foreach (var ownMirroringConfiguration in Model.OwnMirroringConfigurations)
                {
                    <li>
                        <span>
                            @{
                                var ownMirroringConfigurationTitle = ownMirroringConfiguration.As<Orchard.ContentManagement.Aspects.ITitleAspect>().Title;
                                var mirrorConfiguration = ownMirroringConfiguration.As<MirroringConfigurationPart>();
                                var isEdit = mirrorConfiguration.GitCloneUrl != null;
                                var gitUrl = string.Empty;
                                var hgUrl = string.Empty;
                                if (isEdit)
                                {
                                    var passwordOrTokenAddedForGit = mirrorConfiguration.GitCloneUrl.LastIndexOf('@') > 0;
                                    var passwordOrTokenAddedForHg = mirrorConfiguration.HgCloneUrl.LastIndexOf('@') > 0;
                                    gitUrl = passwordOrTokenAddedForGit ? "https:\\" + mirrorConfiguration.GitCloneUrl.Substring(mirrorConfiguration.GitCloneUrl.LastIndexOf('@')) : mirrorConfiguration.GitCloneUrl;
                                    hgUrl = passwordOrTokenAddedForHg ? "https:\\" + mirrorConfiguration.HgCloneUrl.Substring(mirrorConfiguration.HgCloneUrl.LastIndexOf('@')) : mirrorConfiguration.HgCloneUrl;
                                    if (!mirrorConfiguration.GitUrlIsHgUrl)
                                    {
                                        gitUrl = gitUrl.Remove(gitUrl.LastIndexOf(".git")).Substring(4);
                                    }
                                }
                            }

                            @ownMirroringConfigurationTitle
                        </span>
                        <span>
                            @Html.ActionLink(T("Edit/View status").Text, "Edit", "MirroringConfiguration", new { Area = "GitHgMirror.Common", id = ownMirroringConfiguration.Id }, new { })
                        </span>
                        <span>
                            @Html.ActionLink(T("Delete").Text, "Delete", "MirroringConfiguration", new { Area = "GitHgMirror.Common", id = ownMirroringConfiguration.Id }, new { itemprop = "RemoveUrl UnsafeUrl" })
                        </span>
                        <span><br />
                            @if (mirrorConfiguration.Direction == MirroringDirection.GitToHg.ToString())
                            {
                                @T("From {0} to {1}", Html.Link(!mirrorConfiguration.GitUrlIsHgUrl ? T("Git").Text : T("Mercurial").Text, gitUrl), Html.Link(T("Mercurial").Text, hgUrl))
                            }
                            else if (mirrorConfiguration.Direction == MirroringDirection.HgToGit.ToString())
                            {
                                @T("From {0} to {1}", Html.Link(T("Mercurial").Text, hgUrl), Html.Link(T("Git").Text, gitUrl))
                            }
                            else
                            {
                                @T("Between {0} and {1}", Html.Link(!mirrorConfiguration.GitUrlIsHgUrl ? T("Git").Text : T("Mercurial").Text, gitUrl), Html.Link(T("Git").Text, gitUrl))
                            }
                        </span>
                    </li>
                }
            </ul>
        </fieldset>

    }
}

@using (Script.Foot())
{
    <script type="text/javascript">
        var confirmRemoveMessage = '@T("Are you sure you want to delete this Mirroring Configuration?")';
    </script>
}